package uk.co.stikman.euler.problems;

import java.util.HashMap;
import java.util.Map;

import uk.co.stikman.euler.base.ProblemBase;

public class P44 extends ProblemBase {

	public static void main(String[] args) {
		System.out.println(new P44().run());
	}

	/**
	 * <pre>
	 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
	 * 
	 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
	 * 
	 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
	 * 
	 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
	 * </pre>
	 */
	@Override
	public String run() {
		Map<Long, Long> numbers = new HashMap<>();
		for (long n = 1; n < 100000; ++n)
			numbers.put(pent(n), n);
		for (int j = 2; j < 10000; ++j) {
			for (int k = j; k >= 2; --k) {
				long pj = pent(j);
				long pk = pent(k);
				long d = pk - pj;
				if (d < 0)
					d = -d;
				if (numbers.containsKey(pj + pk) && numbers.containsKey(d)) {
					log("j = " + j + ", k = " + k);
					return Long.toString(d);
				}
			}
		}
		throw new RuntimeException("Failed");
	}

	private static final long pent(long n) {
		return n * (3 * n - 1) / 2;
	}

	@Override
	public String getName() {
		return "Pentagon numbers";
	}

}
